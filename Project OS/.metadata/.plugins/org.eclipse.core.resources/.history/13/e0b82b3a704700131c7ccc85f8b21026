package com.cybersoftteam.app.project_so.network;

import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;

import android.util.Log;

import smartorder.common.ClientRequest;
import smartorder.common.ServerResponse;

public class TCPClient {
	public static final String SERVERIP="192.168.56hjnn.1"; 
	public static final int SERVERPORT=8888;
	private ServerResponse serverResponse;
	private OnObjectRecieved onObjectRecieved;
	private boolean mrun=false;
	private ObjectOutputStream oos;
	private ObjectInputStream ois;
	//Declare the interface. The method objectRecieved(ServerResponse serverResponse) will must be implemented in the MyActivity
	//class at on asynckTask doInBackground
	public interface OnObjectRecieved{
		public void objectRecieved(ServerResponse serverResponse);
	}

	public TCPClient(OnObjectRecieved listener){
		this.onObjectRecieved=listener;
	}

	public void sentCleintRequest(ClientRequest request)throws Exception{
		oos.writeObject(request);
		oos.close();
	}

	public void stopClient(){
		mrun=false;
	}

	public void run(){
		mrun=true;

		try {
			InetAddress serAddress= InetAddress.getByName(SERVERIP);

			Log.i("TCP cliet", "Connecting......");

			Socket soc=new Socket(serAddress,SERVERPORT);

			try {
				//sent request to server
				OutputStream os = soc.getOutputStream();
				oos = new ObjectOutputStream(os);
				Log.i("TCP CLient", "Sent.........");
				//receive the response which the server sends back
				InputStream is = soc.getInputStream();
				ois = new ObjectInputStream(is);
				//in this while the client listens for the response sent by the server
				while (mrun) {
					Object obj = ois.readObject();

					if ((obj != null) && (obj instanceof ServerResponse)
							&& onObjectRecieved != null) {
						//call the method onRecieved from MyActivity class
						serverResponse = (ServerResponse) obj;
						onObjectRecieved.objectRecieved(serverResponse);
					}
					//serverResponse = null;

				}
				Log.e("RESPONSE FROM SERVER", "S: Received Message: '"
						+ serverResponse + "'");
			} catch (Exception e) {
				   Log.i("TCP", "S: Error", e);
			}finally{
				//the socket must be closed. It is not possible to reconnect to this socket
                // after it is closed, which means a new socket instance has to be created.
                //socket.close();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public ServerResponse getServerResponse() {
		return serverResponse;
	}

	public void setServerResponse(ServerResponse serverResponse) {
		this.serverResponse = serverResponse;
	}

	public OnObjectRecieved getOnObjectRecieved() {
		return onObjectRecieved;
	}

	public void setOnObjectRecieved(OnObjectRecieved onObjectRecieved) {
		this.onObjectRecieved = onObjectRecieved;
	}

	public boolean isMrun() {
		return mrun;
	}

	public void setMrun(boolean mrun) {
		this.mrun = mrun;
	}


}
