package model;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;

import smartorder.common.ServerResponse;

import model.TCPServer.OnMessageReceived;

public class ProcessClientConnection implements Runnable{
	private Socket clientSocket;
	private TCPServer.OnMessageReceived messageListener;

	public ProcessClientConnection(Socket clientSocket,
			OnMessageReceived messageListener) {
		super();
		this.clientSocket = clientSocket;
		this.messageListener = messageListener;
	}

	@Override
	public void run() {
		try {

			//sends the message to the client
			PrintWriter output = new PrintWriter(new BufferedWriter(
					new OutputStreamWriter(clientSocket.getOutputStream())),
					true);

			//read the message received from client
			BufferedReader in = new BufferedReader(
					new InputStreamReader(clientSocket.getInputStream()));

			//in this while we wait to receive messages from client (it's an infinite loop)
			//this while it's like a listener for messages
			while (true) {
				String message = in.readLine();

				if (message != null && messageListener != null) {
					//call the method messageReceived from ServerBoard class
					messageListener.messageReceived(new ServerResponse());
				}
			}

		} catch (Exception e) {
			System.out.println("S: Error");
			e.printStackTrace();
		} finally {
			try {
				clientSocket.close();
			} catch (IOException e) {
				System.out.println("S: Error");
				e.printStackTrace();
			}
			System.out.println("S: Done.");
		}
	}
}
